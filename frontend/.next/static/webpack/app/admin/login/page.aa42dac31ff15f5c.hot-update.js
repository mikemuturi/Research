"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/login/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authAPI: () => (/* binding */ authAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   interviewAPI: () => (/* binding */ interviewAPI),\n/* harmony export */   surveyAPI: () => (/* binding */ surveyAPI)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n// import axios, { AxiosResponse } from \"axios\";\n// const API_BASE_URL =\n//   //process.env.NEXT_PUBLIC_API_BASE_URL || \"http://127.0.0.1:8000/api\";\n//     // NEXT_PUBLIC_API_BASE_URL=https://rafsia.org/api\";\n//  //  const API_BASE_URL =\n//   process.env.NEXT_PUBLIC_API_BASE_URL || \"https://rafsia.org/api\";\n// const api = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: { \"Content-Type\": \"application/json\" },\n// });\n// const isBrowser = typeof window !== \"undefined\";\n// // Attach access token for client requests\n// api.interceptors.request.use((config) => {\n//   if (isBrowser) {\n//     const token = localStorage.getItem(\"access_token\");\n//     if (token) {\n//       config.headers = config.headers || {};\n//       (config.headers as any).Authorization = `Bearer ${token}`;\n//     }\n//   }\n//   return config;\n// });\n// // Auto-refresh access token once on 401\n// api.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const status = error?.response?.status;\n//     const original = error.config;\n//     if (status === 401 && isBrowser && !original?._retry) {\n//       const refreshToken = localStorage.getItem(\"refresh_token\");\n//       if (refreshToken) {\n//         try {\n//           original._retry = true;\n//           const { data } = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {\n//             refresh: refreshToken,\n//           });\n//           const { access } = data || {};\n//           if (access) {\n//             localStorage.setItem(\"access_token\", access);\n//             original.headers = original.headers || {};\n//             original.headers.Authorization = `Bearer ${access}`;\n//             return api.request(original);\n//           }\n//         } catch {\n//           // fall-through to logout\n//         }\n//       }\n//       // clear tokens & redirect to login\n//       localStorage.removeItem(\"access_token\");\n//       localStorage.removeItem(\"refresh_token\");\n//       if (isBrowser) window.location.href = \"/admin/login\";\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n// export default api;\n// export const authAPI = {\n//   login: (usernameOrEmail: string, password: string): Promise<AxiosResponse<any>> =>\n//     api.post(\"/auth/token/\", { username: usernameOrEmail, password }),\n//   register: (username: string, email: string, password: string): Promise<AxiosResponse<any>> =>\n//     api.post(\"/auth/register/\", { username, email, password }),\n//   refresh: (refresh_token: string): Promise<AxiosResponse<any>> =>\n//     api.post(\"/auth/token/refresh/\", { refresh: refresh_token }),\n// };\n// export const surveyAPI = {\n//   getQuestions: (role?: string, dimension?: string) =>\n//     api.get(\"/surveys/questions/\", { params: { role, dimension } }),\n//   submitSurvey: (data: any) => api.post(\"/surveys/submissions/\", data),\n//   getSubmission: (id: string, isPublic?: boolean) =>\n//     api.get(`/surveys/submissions/${id}/`, { params: isPublic ? { public: \"true\" } : {} }),\n//   getSubmissions: (filters?: any, page?: number, pageSize?: number) => api.get(\"/surveys/submissions/\", { params: filters }),\n//   getStatistics: () => api.get(\"/surveys/submissions/statistics/\"),\n//   exportCSV: (filters?: any) => api.get(\"/surveys/submissions/export_csv/\", { params: filters }),\n//   exportPDF: (id: string) => api.get(`/surveys/submissions/${id}/export_pdf/`),\n//   getInstitutions: () => api.get(\"/surveys/institutions/\"),\n//   getProjects: () => api.get(\"/surveys/projects/\"),\n// };\n// export const interviewAPI = {\n//   getNotes: (filters?: any) => api.get(\"/interviews/notes/\", { params: filters }),\n//   createNote: (data: any) => api.post(\"/interviews/notes/\", data),\n//   updateNote: (id: string, data: any) => api.put(`/interviews/notes/${id}/`, data),\n//   deleteNote: (id: string) => api.delete(`/interviews/notes/${id}/`),\n//   getAnalytics: () => api.get(\"/interviews/notes/analytics/\"),\n// };\n\nconst API_BASE_URL = \"http://localhost:8000/api\";\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst isBrowser = \"object\" !== \"undefined\";\n// Attach access token for client requests\napi.interceptors.request.use((config)=>{\n    if (isBrowser) {\n        const token = localStorage.getItem(\"access_token\");\n        if (token) {\n            config.headers = config.headers || {};\n            config.headers.Authorization = \"Bearer \".concat(token);\n        }\n    }\n    return config;\n});\n// Auto-refresh access token once on 401\napi.interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response;\n    const status = error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status;\n    const original = error.config;\n    if (status === 401 && isBrowser && !(original === null || original === void 0 ? void 0 : original._retry)) {\n        const refreshToken = localStorage.getItem(\"refresh_token\");\n        if (refreshToken) {\n            try {\n                original._retry = true;\n                const { data } = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(API_BASE_URL, \"/auth/token/refresh/\"), {\n                    refresh: refreshToken\n                });\n                const { access } = data || {};\n                if (access) {\n                    localStorage.setItem(\"access_token\", access);\n                    original.headers = original.headers || {};\n                    original.headers.Authorization = \"Bearer \".concat(access);\n                    return api.request(original);\n                }\n            } catch (e) {\n            // fall-through to logout\n            }\n        }\n        // clear tokens & redirect to login\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"refresh_token\");\n        if (isBrowser) window.location.href = \"/admin/login\";\n    }\n    return Promise.reject(error);\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\nconst authAPI = {\n    login: (usernameOrEmail, password)=>api.post(\"/auth/token/\", {\n            username: usernameOrEmail,\n            password\n        }),\n    register: (username, email, password)=>api.post(\"/auth/register/\", {\n            username,\n            email,\n            password\n        }),\n    refresh: (refresh_token)=>api.post(\"/auth/token/refresh/\", {\n            refresh: refresh_token\n        })\n};\nconst surveyAPI = {\n    // Updated getQuestions method with survey_type support\n    getQuestions: function(role) {\n        let surveyType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'rafsia', dimension = arguments.length > 2 ? arguments[2] : void 0;\n        const params = {};\n        if (role) params.role = role;\n        if (surveyType) params.survey_type = surveyType;\n        if (dimension) params.dimension = dimension;\n        return api.get(\"/surveys/questions/\", {\n            params\n        });\n    },\n    submitSurvey: (data)=>api.post(\"/surveys/submissions/\", data),\n    getSubmission: (id, isPublic)=>api.get(\"/surveys/submissions/\".concat(id, \"/\"), {\n            params: isPublic ? {\n                public: \"true\"\n            } : {}\n        }),\n    // Updated getSubmissions with survey_type filter support\n    getSubmissions: (filters, page, pageSize)=>{\n        const params = {\n            ...filters\n        };\n        if (page) params.page = page;\n        if (pageSize) params.page_size = pageSize;\n        return api.get(\"/surveys/submissions/\", {\n            params\n        });\n    },\n    // Updated getStatistics with survey_type filter support\n    getStatistics: (filters)=>api.get(\"/surveys/submissions/statistics/\", {\n            params: filters\n        }),\n    // Updated exportCSV with survey_type filter support\n    exportCSV: (filters)=>api.get(\"/surveys/submissions/export_csv/\", {\n            params: filters\n        }),\n    exportPDF: (id)=>api.get(\"/surveys/submissions/\".concat(id, \"/export_pdf/\")),\n    getInstitutions: ()=>api.get(\"/surveys/institutions/\"),\n    getProjects: ()=>api.get(\"/surveys/projects/\"),\n    // New helper methods for specific survey types\n    getRafsiaQuestions: (role, dimension)=>surveyAPI.getQuestions(role, 'rafsia', dimension),\n    getIspQuestions: (role, dimension)=>surveyAPI.getQuestions(role, 'isp', dimension),\n    // Get submissions filtered by survey type\n    getRafsiaSubmissions: (filters, page, pageSize)=>surveyAPI.getSubmissions({\n            ...filters,\n            survey_type: 'rafsia'\n        }, page, pageSize),\n    getIspSubmissions: (filters, page, pageSize)=>surveyAPI.getSubmissions({\n            ...filters,\n            survey_type: 'isp'\n        }, page, pageSize),\n    // Get statistics filtered by survey type\n    getRafsiaStatistics: (filters)=>surveyAPI.getStatistics({\n            ...filters,\n            survey_type: 'rafsia'\n        }),\n    getIspStatistics: (filters)=>surveyAPI.getStatistics({\n            ...filters,\n            survey_type: 'isp'\n        }),\n    // Export CSV filtered by survey type\n    exportRafsiaCSV: (filters)=>surveyAPI.exportCSV({\n            ...filters,\n            survey_type: 'rafsia'\n        }),\n    exportIspCSV: (filters)=>surveyAPI.exportCSV({\n            ...filters,\n            survey_type: 'isp'\n        })\n};\nconst interviewAPI = {\n    getNotes: (filters)=>api.get(\"/interviews/notes/\", {\n            params: filters\n        }),\n    createNote: (data)=>api.post(\"/interviews/notes/\", data),\n    updateNote: (id, data)=>api.put(\"/interviews/notes/\".concat(id, \"/\"), data),\n    deleteNote: (id)=>api.delete(\"/interviews/notes/\".concat(id, \"/\")),\n    getAnalytics: ()=>api.get(\"/interviews/notes/analytics/\")\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});