/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/survey/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fmike%2FBackup%2FResearch%2Ffrontend%2Fsrc%2Fcomponents%2Fsurvey%2FSurveyForm.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!":
/*!************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fmike%2FBackup%2FResearch%2Ffrontend%2Fsrc%2Fcomponents%2Fsurvey%2FSurveyForm.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false! ***!
  \************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./src/components/survey/SurveyForm.tsx */ \"(app-pages-browser)/./src/components/survey/SurveyForm.tsx\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGaG9tZSUyRm1pa2UlMkZCYWNrdXAlMkZSZXNlYXJjaCUyRmZyb250ZW5kJTJGc3JjJTJGY29tcG9uZW50cyUyRnN1cnZleSUyRlN1cnZleUZvcm0udHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyZGVmYXVsdCUyMiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDRNQUEwSSIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiZGVmYXVsdFwiXSAqLyBcIi9ob21lL21pa2UvQmFja3VwL1Jlc2VhcmNoL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL3N1cnZleS9TdXJ2ZXlGb3JtLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fmike%2FBackup%2FResearch%2Ffrontend%2Fsrc%2Fcomponents%2Fsurvey%2FSurveyForm.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/survey/SurveyForm.tsx":
/*!**********************************************!*\
  !*** ./src/components/survey/SurveyForm.tsx ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { useRouter } from 'next/navigation';\n// import { ChevronLeft, ChevronRight, Check } from 'lucide-react';\n// import { surveyAPI } from '@/lib/api';\n// import { Question, Institution, Project } from '@/types';\n// import Button from '@/components/ui/Button';\n// import Input from '@/components/ui/Input';\n// import Select from '@/components/ui/Select';\n// import { Card, CardContent, CardHeader } from '@/components/ui/Card';\n// const DIMENSIONS = [\n//   { key: 'technical', label: 'Technical Readiness' },\n//   { key: 'economic', label: 'Economic Readiness' },\n//   { key: 'socio_cultural', label: 'Socio-Cultural Readiness' },\n//   { key: 'environmental', label: 'Environmental Readiness' },\n//   { key: 'policy_regulatory', label: 'Policy & Regulatory Readiness' },\n// ];\n// const ROLE_OPTIONS = [\n//   { value: '', label: 'Select your role...' },\n//   { value: 'lecturer', label: 'Lecturer' },\n//   { value: 'it_support', label: 'IT Support' },\n//   { value: 'admin', label: 'Administrator' },\n//   { value: 'principal', label: 'Principal' },\n//   { value: 'student', label: 'Student' },\n//   { value: 'service_provider', label: 'Service Provider' },\n// ];\n// const SurveyForm: React.FC = () => {\n//   const router = useRouter();\n//   const [currentStep, setCurrentStep] = useState(0);\n//   const [questions, setQuestions] = useState<Question[]>([]);\n//   const [institutions, setInstitutions] = useState<Institution[]>([]);\n//   const [projects, setProjects] = useState<Project[]>([]);\n//   const [loading, setLoading] = useState(false);\n//   // Form data\n//   const [formData, setFormData] = useState({\n//     // Respondent info\n//     name: '',\n//     email: '',\n//     phone: '',\n//     role: '',\n//     institution: '',\n//     institution_name: '',\n//     county: '',\n//     project: '',\n//     consent_given: false,\n//     is_anonymous: false,\n//     // Answers - grouped by dimension\n//     answers: {} as Record<number, number>,\n//   });\n//   const [errors, setErrors] = useState<Record<string, string>>({});\n//   useEffect(() => {\n//     loadInitialData();\n//   }, []);\n//   useEffect(() => {\n//     if (formData.role) {\n//       loadQuestions();\n//     }\n//   }, [formData.role]);\n//   const loadInitialData = async () => {\n//     try {\n//       const [institutionsRes, projectsRes] = await Promise.all([\n//         surveyAPI.getInstitutions(),\n//         surveyAPI.getProjects(),\n//       ]);\n//       setInstitutions(institutionsRes.data);\n//       setProjects(projectsRes.data);\n//     } catch (error) {\n//       console.error('Error loading initial data:', error);\n//     }\n//   };\n//   const loadQuestions = async () => {\n//     try {\n//       setLoading(true);\n//       const surveyRole = ['lecturer', 'it_support', 'admin', 'principal', 'student'].includes(formData.role) ? 'ihl' : 'isp';\n//       const response = await surveyAPI.getQuestions(surveyRole);\n//       setQuestions(response.data);\n//       // Initialize answers with neutral value (3)\n//       const initialAnswers: Record<number, number> = {};\n//       response.data.forEach((q: Question) => {\n//         initialAnswers[q.id] = 3;\n//       });\n//       setFormData(prev => ({ ...prev, answers: initialAnswers }));\n//       console.log(`Loaded ${response.data.length} questions for role: ${surveyRole}`);\n//     } catch (error) {\n//       console.error('Error loading questions:', error);\n//       alert('Error loading questions. Please refresh the page and try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleInputChange = (field: string, value: any) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//     if (errors[field]) {\n//       setErrors(prev => ({ ...prev, [field]: '' }));\n//     }\n//   };\n//   const handleAnswerChange = (questionId: number, value: number) => {\n//     setFormData(prev => ({\n//       ...prev,\n//       answers: { ...prev.answers, [questionId]: value }\n//     }));\n//   };\n//   const validateStep = (step: number): boolean => {\n//     const newErrors: Record<string, string> = {};\n//     if (step === 0) {\n//       if (!formData.role) newErrors.role = 'Role is required';\n//       if (!formData.county) newErrors.county = 'County is required';\n//       if (!formData.consent_given) newErrors.consent_given = 'Consent is required to proceed';\n//       if (formData.role !== 'service_provider' && !formData.is_anonymous) {\n//         if (!formData.name) newErrors.name = 'Name is required';\n//       }\n//     }\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n//   const nextStep = () => {\n//     if (validateStep(currentStep)) {\n//       setCurrentStep(prev => Math.min(prev + 1, getMaxStep()));\n//     }\n//   };\n//   const prevStep = () => {\n//     setCurrentStep(prev => Math.max(prev - 1, 0));\n//   };\n//   const getMaxStep = () => {\n//     return DIMENSIONS.length; // 0: info, 1-5: dimensions\n//   };\n//   const getCurrentDimensionQuestions = () => {\n//     if (currentStep === 0) return [];\n//     const dimension = DIMENSIONS[currentStep - 1];\n//     return questions.filter(q => q.dimension === dimension.key);\n//   };\n//   const submitSurvey = async () => {\n//     if (!validateStep(currentStep)) return;\n//     setLoading(true);\n//     try {\n//       const submissionData = {\n//         ...formData,\n//         institution: formData.institution ? Number(formData.institution) : null,\n//         project: formData.project ? Number(formData.project) : null,\n//         answers: Object.entries(formData.answers).map(([questionId, value]) => ({\n//           question: Number(questionId),\n//           value: Number(value)\n//         }))\n//       };\n//       const response = await surveyAPI.submitSurvey(submissionData);\n//       router.push(`/results/${response.data.id}`);\n//     } catch (error: any) {\n//       console.error('Error submitting survey:', error);\n//       alert('Error submitting survey. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const renderRespondentInfo = () => (\n//     <Card>\n//       <CardHeader>\n//         <h2 className=\"text-xl font-semibold text-gray-900\">Respondent Information</h2>\n//         <p className=\"text-sm text-gray-600\">Please provide your basic information to begin the assessment.</p>\n//       </CardHeader>\n//       <CardContent className=\"space-y-6\">\n//         <Select\n//           label=\"Role *\"\n//           value={formData.role}\n//           onChange={(e) => handleInputChange('role', e.target.value)}\n//           options={ROLE_OPTIONS}\n//           error={errors.role}\n//         />\n//         <div className=\"flex items-center space-x-2\">\n//           <input\n//             type=\"checkbox\"\n//             id=\"anonymous\"\n//             checked={formData.is_anonymous}\n//             onChange={(e) => handleInputChange('is_anonymous', e.target.checked)}\n//             className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n//           />\n//           <label htmlFor=\"anonymous\" className=\"text-sm text-gray-700\">\n//             Submit anonymously (hide personal information)\n//           </label>\n//         </div>\n//         {!formData.is_anonymous && (\n//           <>\n//             <Input\n//               label=\"Full Name *\"\n//               type=\"text\"\n//               value={formData.name}\n//               onChange={(e) => handleInputChange('name', e.target.value)}\n//               error={errors.name}\n//             />\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n//               <Input\n//                 label=\"Email Address\"\n//                 type=\"email\"\n//                 value={formData.email}\n//                 onChange={(e) => handleInputChange('email', e.target.value)}\n//               />\n//               <Input\n//                 label=\"Phone Number\"\n//                 type=\"tel\"\n//                 value={formData.phone}\n//                 onChange={(e) => handleInputChange('phone', e.target.value)}\n//               />\n//             </div>\n//           </>\n//         )}\n//         {formData.role !== 'service_provider' && (\n//           <>\n//             {institutions.length > 0 && (\n//               <Select\n//                 label=\"Institution (if listed)\"\n//                 value={formData.institution}\n//                 onChange={(e) => handleInputChange('institution', e.target.value)}\n//                 options={[\n//                   { value: '', label: 'Select institution...' },\n//                   ...institutions.map(inst => ({ value: inst.id.toString(), label: inst.name }))\n//                 ]}\n//               />\n//             )}\n//             <Input\n//               label=\"Institution Name (if not listed above)\"\n//               type=\"text\"\n//               value={formData.institution_name}\n//               onChange={(e) => handleInputChange('institution_name', e.target.value)}\n//             />\n//           </>\n//         )}\n//         <Input\n//           label=\"County *\"\n//           type=\"text\"\n//           value={formData.county}\n//           onChange={(e) => handleInputChange('county', e.target.value)}\n//           error={errors.county}\n//         />\n//         {projects.length > 0 && (\n//           <Select\n//             label=\"Project/Study\"\n//             value={formData.project}\n//             onChange={(e) => handleInputChange('project', e.target.value)}\n//             options={[\n//               { value: '', label: 'Select project...' },\n//               ...projects.map(proj => ({ value: proj.id.toString(), label: proj.name }))\n//             ]}\n//           />\n//         )}\n//         <div className=\"bg-blue-50 p-4 rounded-lg\">\n//           <div className=\"flex items-start space-x-2\">\n//             <input\n//               type=\"checkbox\"\n//               id=\"consent\"\n//               checked={formData.consent_given}\n//               onChange={(e) => handleInputChange('consent_given', e.target.checked)}\n//               className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1\"\n//             />\n//             <div>\n//               <label htmlFor=\"consent\" className=\"text-sm text-gray-700\">\n//                 <strong>Informed Consent *</strong>\n//               </label>\n//               <p className=\"text-xs text-gray-600 mt-1\">\n//                 I understand that my responses will be used for research purposes to assess readiness for satellite internet adoption. \n//                 My data will be handled securely and in compliance with applicable data protection regulations. \n//                 I can withdraw my consent at any time by contacting the research team.\n//               </p>\n//             </div>\n//           </div>\n//           {errors.consent_given && (\n//             <p className=\"text-sm text-red-600 mt-2\">{errors.consent_given}</p>\n//           )}\n//         </div>\n//       </CardContent>\n//     </Card>\n//   );\n//   const renderLikertScale = (questionId: number, currentValue: number) => {\n//     const labels = ['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'];\n//     return (\n//       <div className=\"space-y-2\">\n//         <div className=\"flex justify-between items-center\">\n//           {labels.map((label, index) => (\n//             <span key={index} className=\"text-xs text-gray-500 text-center flex-1\">\n//               {label}\n//             </span>\n//           ))}\n//         </div>\n//         <div className=\"flex justify-between items-center\">\n//           {[1, 2, 3, 4, 5].map((value) => (\n//             <label key={value} className=\"flex flex-col items-center space-y-1 cursor-pointer flex-1\">\n//               <input\n//                 type=\"radio\"\n//                 name={`question-${questionId}`}\n//                 value={value}\n//                 checked={currentValue === value}\n//                 onChange={() => handleAnswerChange(questionId, value)}\n//                 className=\"h-4 w-4 text-blue-600 focus:ring-blue-500\"\n//               />\n//               <span className=\"text-sm font-medium\">{value}</span>\n//             </label>\n//           ))}\n//         </div>\n//       </div>\n//     );\n//   };\n//   const renderDimension = () => {\n//     if (currentStep === 0) return renderRespondentInfo();\n//     const dimension = DIMENSIONS[currentStep - 1];\n//     const dimensionQuestions = getCurrentDimensionQuestions();\n//     if (loading) {\n//       return (\n//         <Card>\n//           <CardContent className=\"flex items-center justify-center py-12\">\n//             <div className=\"text-center\">\n//               <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n//               <p className=\"mt-2 text-gray-600\">Loading questions...</p>\n//             </div>\n//           </CardContent>\n//         </Card>\n//       );\n//     }\n//     if (dimensionQuestions.length === 0) {\n//       return (\n//         <Card>\n//           <CardHeader>\n//             <h2 className=\"text-xl font-semibold text-gray-900\">{dimension.label}</h2>\n//           </CardHeader>\n//           <CardContent className=\"text-center py-8\">\n//             <p className=\"text-gray-600 mb-4\">No questions available for this dimension.</p>\n//             <p className=\"text-sm text-gray-500\">\n//               Please ensure you have selected a role and that questions are loaded in the database.\n//             </p>\n//           </CardContent>\n//         </Card>\n//       );\n//     }\n//     return (\n//       <Card>\n//         <CardHeader>\n//           <h2 className=\"text-xl font-semibold text-gray-900\">{dimension.label}</h2>\n//           <p className=\"text-sm text-gray-600\">\n//             Please rate your agreement with the following statements on a scale of 1 to 5. \n//             ({dimensionQuestions.length} questions)\n//           </p>\n//         </CardHeader>\n//         <CardContent className=\"space-y-8\">\n//           {dimensionQuestions.map((question) => (\n//             <div key={question.id} className=\"bg-gray-50 p-6 rounded-lg\">\n//               <h3 className=\"text-sm font-medium text-gray-900 mb-4\">\n//                 {question.text}\n//               </h3>\n//               {renderLikertScale(question.id, formData.answers[question.id] || 3)}\n//             </div>\n//           ))}\n//         </CardContent>\n//       </Card>\n//     );\n//   };\n//   const getProgressPercentage = () => {\n//     return (currentStep / getMaxStep()) * 100;\n//   };\n//   return (\n//     <div className=\"min-h-screen bg-gray-50 py-8\">\n//       <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n//         {/* Header */}\n//         <div className=\"text-center mb-8\">\n//           <h1 className=\"text-3xl font-bold text-gray-900\">RAFSIA Readiness Assessment</h1>\n//           <p className=\"text-gray-600 mt-2\">Satellite Internet Adoption Readiness Survey</p>\n//         </div>\n//         {/* Progress bar */}\n//         <div className=\"mb-8\">\n//           <div className=\"flex justify-between items-center mb-2\">\n//             <span className=\"text-sm text-gray-600\">\n//               Step {currentStep + 1} of {getMaxStep() + 1}\n//             </span>\n//             <span className=\"text-sm text-gray-600\">\n//               {Math.round(getProgressPercentage())}% Complete\n//             </span>\n//           </div>\n//           <div className=\"w-full bg-gray-200 rounded-full h-2\">\n//             <div\n//               className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n//               style={{ width: `${getProgressPercentage()}%` }}\n//             />\n//           </div>\n//         </div>\n//         {/* Survey content */}\n//         {renderDimension()}\n//         {/* Navigation */}\n//         <div className=\"flex justify-between mt-8\">\n//           <Button\n//             variant=\"outline\"\n//             onClick={prevStep}\n//             disabled={currentStep === 0}\n//             className=\"flex items-center space-x-2\"\n//           >\n//             <ChevronLeft size={16} />\n//             <span>Previous</span>\n//           </Button>\n//           {currentStep === getMaxStep() ? (\n//             <Button\n//               onClick={submitSurvey}\n//               disabled={loading}\n//               className=\"flex items-center space-x-2\"\n//             >\n//               {loading ? (\n//                 <span>Submitting...</span>\n//               ) : (\n//                 <>\n//                   <Check size={16} />\n//                   <span>Submit Survey</span>\n//                 </>\n//               )}\n//             </Button>\n//           ) : (\n//             <Button\n//               onClick={nextStep}\n//               className=\"flex items-center space-x-2\"\n//             >\n//               <span>Next</span>\n//               <ChevronRight size={16} />\n//             </Button>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default SurveyForm;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/survey/SurveyForm.tsx\n"));

/***/ })

});